/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_zenzet_cipher_crypto_Mycrypt */

#ifndef _Included_com_zenzet_cipher_crypto_Mycrypt
#define _Included_com_zenzet_cipher_crypto_Mycrypt
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_zenzet_cipher_crypto_Mycrypt
 * Method:    LOCKetAESCFB
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_zenzet_cipher_crypto_Mycrypt_LOCKetAESCFB
  (JNIEnv *, jclass);

/*
 * Class:     com_zenzet_cipher_crypto_Mycrypt
 * Method:    LKTGenerateKeyPair
 * Signature: (I)Ljava/util/Map;
 */
JNIEXPORT jobject JNICALL Java_com_zenzet_cipher_crypto_Mycrypt_LKTGenerateKeyPair
  (JNIEnv *, jclass, jint);

/*
 * Class:     com_zenzet_cipher_crypto_Mycrypt
 * Method:    getInstance
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_com_zenzet_cipher_crypto_Mycrypt_getInstance
  (JNIEnv *, jclass, jstring);

/*
 * Class:     com_zenzet_cipher_crypto_Mycrypt
 * Method:    digestUpdate
 * Signature: (J[B)I
 */
JNIEXPORT jint JNICALL Java_com_zenzet_cipher_crypto_Mycrypt_digestUpdate
  (JNIEnv *, jclass, jlong, jbyteArray);

/*
 * Class:     com_zenzet_cipher_crypto_Mycrypt
 * Method:    digestFinal
 * Signature: (J)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_zenzet_cipher_crypto_Mycrypt_digestFinal
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_zenzet_cipher_crypto_Mycrypt
 * Method:    OpenSslRSANativeCryptInitContext
 * Signature: (II[B)J
 */
JNIEXPORT jlong JNICALL Java_com_zenzet_cipher_crypto_Mycrypt_OpenSslRSANativeCryptInitContext
  (JNIEnv *, jclass, jint, jint, jbyteArray);

/*
 * Class:     com_zenzet_cipher_crypto_Mycrypt
 * Method:    OpenSslRSANativeCryptUpdate
 * Signature: (JI[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_zenzet_cipher_crypto_Mycrypt_OpenSslRSANativeCryptUpdate
  (JNIEnv *, jclass, jlong, jint, jbyteArray);

/*
 * Class:     com_zenzet_cipher_crypto_Mycrypt
 * Method:    OpenSslRSANativeCryptdoFinal
 * Signature: (JI[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_zenzet_cipher_crypto_Mycrypt_OpenSslRSANativeCryptdoFinal
  (JNIEnv *, jclass, jlong, jint, jbyteArray);

/*
 * Class:     com_zenzet_cipher_crypto_Mycrypt
 * Method:    OpenSslRSANativeSignInitContext
 * Signature: (Ljava/lang/String;[B)J
 */
JNIEXPORT jlong JNICALL Java_com_zenzet_cipher_crypto_Mycrypt_OpenSslRSANativeSignInitContext
  (JNIEnv *, jclass, jstring, jbyteArray);

/*
 * Class:     com_zenzet_cipher_crypto_Mycrypt
 * Method:    OpenSslRSANativeSignUpdate
 * Signature: (J[B)I
 */
JNIEXPORT jint JNICALL Java_com_zenzet_cipher_crypto_Mycrypt_OpenSslRSANativeSignUpdate
  (JNIEnv *, jclass, jlong, jbyteArray);

/*
 * Class:     com_zenzet_cipher_crypto_Mycrypt
 * Method:    OpenSslRSANativeSigndoFinal
 * Signature: (J)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_zenzet_cipher_crypto_Mycrypt_OpenSslRSANativeSigndoFinal
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_zenzet_cipher_crypto_Mycrypt
 * Method:    OpenSslRSANativeVerifyInitContext
 * Signature: (Ljava/lang/String;[B)J
 */
JNIEXPORT jlong JNICALL Java_com_zenzet_cipher_crypto_Mycrypt_OpenSslRSANativeVerifyInitContext
  (JNIEnv *, jclass, jstring, jbyteArray);

/*
 * Class:     com_zenzet_cipher_crypto_Mycrypt
 * Method:    OpenSslRSANativeVerifyUpdate
 * Signature: (J[B)I
 */
JNIEXPORT jint JNICALL Java_com_zenzet_cipher_crypto_Mycrypt_OpenSslRSANativeVerifyUpdate
  (JNIEnv *, jclass, jlong, jbyteArray);

/*
 * Class:     com_zenzet_cipher_crypto_Mycrypt
 * Method:    OpenSslRSANativeVerifydoFinal
 * Signature: (J[B)I
 */
JNIEXPORT jint JNICALL Java_com_zenzet_cipher_crypto_Mycrypt_OpenSslRSANativeVerifydoFinal
  (JNIEnv *, jclass, jlong, jbyteArray);

/*
 * Class:     com_zenzet_cipher_crypto_Mycrypt
 * Method:    OpenSslNativegenerateSM2KeyPair
 * Signature: ()Ljava/util/Map;
 */
JNIEXPORT jobject JNICALL Java_com_zenzet_cipher_crypto_Mycrypt_OpenSslNativegenerateSM2KeyPair
  (JNIEnv *, jclass);

/*
 * Class:     com_zenzet_cipher_crypto_Mycrypt
 * Method:    OpenSslNativeSM2CryptInitContext
 * Signature: (I[B)J
 */
JNIEXPORT jlong JNICALL Java_com_zenzet_cipher_crypto_Mycrypt_OpenSslNativeSM2CryptInitContext
  (JNIEnv *, jclass, jint, jbyteArray);

/*
 * Class:     com_zenzet_cipher_crypto_Mycrypt
 * Method:    OpenSslNativeSM2CryptdoFinal
 * Signature: (JI[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_zenzet_cipher_crypto_Mycrypt_OpenSslNativeSM2CryptdoFinal
  (JNIEnv *, jclass, jlong, jint, jbyteArray);

/*
 * Class:     com_zenzet_cipher_crypto_Mycrypt
 * Method:    OpenSslNativeSM2SignInitContext
 * Signature: (Ljava/lang/String;[B)J
 */
JNIEXPORT jlong JNICALL Java_com_zenzet_cipher_crypto_Mycrypt_OpenSslNativeSM2SignInitContext
  (JNIEnv *, jclass, jstring, jbyteArray);

/*
 * Class:     com_zenzet_cipher_crypto_Mycrypt
 * Method:    OpenSslNativeSM2SignUpdate
 * Signature: (J[B)I
 */
JNIEXPORT jint JNICALL Java_com_zenzet_cipher_crypto_Mycrypt_OpenSslNativeSM2SignUpdate
  (JNIEnv *, jclass, jlong, jbyteArray);

/*
 * Class:     com_zenzet_cipher_crypto_Mycrypt
 * Method:    OpenSslNativeSM2SigndoFinal
 * Signature: (J)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_zenzet_cipher_crypto_Mycrypt_OpenSslNativeSM2SigndoFinal
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_zenzet_cipher_crypto_Mycrypt
 * Method:    OpenSslNativeSM2VerifyInitContext
 * Signature: (Ljava/lang/String;[B)J
 */
JNIEXPORT jlong JNICALL Java_com_zenzet_cipher_crypto_Mycrypt_OpenSslNativeSM2VerifyInitContext
  (JNIEnv *, jclass, jstring, jbyteArray);

/*
 * Class:     com_zenzet_cipher_crypto_Mycrypt
 * Method:    OpenSslNativeSM2VerifyUpdate
 * Signature: (J[B)I
 */
JNIEXPORT jint JNICALL Java_com_zenzet_cipher_crypto_Mycrypt_OpenSslNativeSM2VerifyUpdate
  (JNIEnv *, jclass, jlong, jbyteArray);

/*
 * Class:     com_zenzet_cipher_crypto_Mycrypt
 * Method:    OpenSslNativeSM2VerifydoFinal
 * Signature: (J[B)I
 */
JNIEXPORT jint JNICALL Java_com_zenzet_cipher_crypto_Mycrypt_OpenSslNativeSM2VerifydoFinal
  (JNIEnv *, jclass, jlong, jbyteArray);

#ifdef __cplusplus
}
#endif
#endif
